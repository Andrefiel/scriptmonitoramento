version: '3.8'

services:
  # Banco de Dados para GLPI
  glpidb:
    image: percona/percona-server:8.0
    container_name: db-glpi
    environment:
      MYSQL_ROOT_PASSWORD: ${GLPI_ROOT_PASSWORD}
      MYSQL_DATABASE: ${GLPI_DB}
      MYSQL_USER: ${GLPI_USER}
      MYSQL_PASSWORD: ${GLPI_PASSWORD}
      TZ: America/Fortaleza
    volumes:
      - /docker/glpi/percona/log:/var/log/mysql
      - /docker/glpi/percona/lib:/var/lib/mysql
      - /docker/glpi/backup:/backup
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${GLPI_ROOT_PASSWORD}"]
      interval: 10s
      retries: 5
      start_period: 10s

  # GLPI
  glpi_app:
    image: sdbrasil/glpi:10.0.18
    container_name: glpi
    environment:
      MYSQL_HOST: glpidb
      MYSQL_DATABASE: ${GLPI_DB}
      MYSQL_USER: ${GLPI_USER}
      MYSQL_PASSWORD: ${GLPI_PASSWORD}
    volumes:
      - /docker/glpi/config:/etc/glpi
      - /docker/glpi/documents:/var/lib/glpi/files/data-documents
      - /docker/glpi/plugins:/usr/share/glpi/plugins
      - /docker/glpi/marketplace:/usr/share/glpi/marketplace
      - /docker/glpi/files/_plugins:/var/lib/glpi/files/_plugins
      - /docker/glpi/backup:/backup
    ports:
      - "8080:80"
    depends_on:
      glpidb:
        condition: service_healthy
    networks:
      - backend
      - frontend
    restart: unless-stopped

  # Banco de Dados para Zabbix
  zabbix-db:
    image: mysql:8.0
    container_name: zabbix-db
    environment:
      MYSQL_DATABASE: ${ZABBIX_DB}
      MYSQL_USER: ${ZABBIX_USER}
      MYSQL_PASSWORD: ${ZABBIX_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${ZABBIX_ROOT_PASSWORD}
    volumes:
      - /docker/zabbix-db:/var/lib/mysql
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${ZABBIX_ROOT_PASSWORD}"]
      interval: 10s
      retries: 5
      start_period: 10s

  # Zabbix Server
  zabbix-server:
    image: zabbix/zabbix-server-mysql:latest
    container_name: zabbix-server
    environment:
      DB_SERVER_HOST: zabbix-db
      MYSQL_DATABASE: ${ZABBIX_DB}
      MYSQL_USER: ${ZABBIX_USER}
      MYSQL_PASSWORD: ${ZABBIX_PASSWORD}
    volumes:
      - /docker/zabbix_server_data:/usr/lib/zabbix
    ports:
      - "10051:10051"
    depends_on:
      zabbix-db:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped

  # Zabbix Frontend
  zabbix-frontend:
    image: zabbix/zabbix-web-nginx-mysql:latest
    container_name: zabbix-frontend
    environment:
      DB_SERVER_HOST: zabbix-db
      MYSQL_DATABASE: ${ZABBIX_DB}
      MYSQL_USER: ${ZABBIX_USER}
      MYSQL_PASSWORD: ${ZABBIX_PASSWORD}
      ZBX_SERVER_HOST: zabbix-server
    ports:
      - "8081:8080"
    depends_on:
      zabbix-db:
        condition: service_healthy
      zabbix-server:
        condition: service_started
    networks:
      - frontend
    restart: unless-stopped

  # Banco de Dados para Nginx Proxy Manager
  nginx-db:
    image: mysql:8.0
    container_name: nginx-db
    environment:
      MYSQL_DATABASE: ${NPM_DB}
      MYSQL_USER: ${NPM_USER}
      MYSQL_PASSWORD: ${NPM_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${NPM_ROOT_PASSWORD}
    volumes:
      - /docker/nginx-db:/var/lib/mysql
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p${NPM_ROOT_PASSWORD}"]
      interval: 10s
      retries: 5
      start_period: 10s

  # Nginx Proxy Manager
  nginx-proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager
    ports:
      - "80:80"
      - "443:443"
      - "81:81"
    environment:
      DB_MYSQL_HOST: nginx-db
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: ${NPM_USER}
      DB_MYSQL_PASSWORD: ${NPM_PASSWORD}
      DB_MYSQL_NAME: ${NPM_DB}
    volumes:
      - /docker/nginx_data:/data
      - /docker/nginx_letsencrypt:/etc/letsencrypt
    depends_on:
      nginx-db:
        condition: service_healthy
    networks:
      - frontend
    restart: unless-stopped

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - /docker/grafana_data:/var/lib/grafana
    networks:
      - backend
      - frontend
    restart: unless-stopped

networks:
  backend:
  frontend:
